let mapleader = "\<Space>"

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')

" text editing
Plug 'tpope/vim-surround'                               " better brackets
Plug 'tpope/vim-commentary'                             " comments # use gc to comment lines and selected text
Plug 'tpope/vim-repeat'                                 " repeat more commands with '.'
Plug 'tpope/vim-sleuth'
" Plug 'terryma/vim-multiple-cursors'                     " multiple cursors like in ST
Plug 'Shougo/deoplete.nvim', { 'on': [], 'do': ':UpdateRemotePlugins', 'tag': 'e28d519' } " autocomplete, use e28d519 because of https://github.com/Shougo/deoplete.nvim/issues/291
Plug 'Raimondi/delimitMate', { 'on': [] }               " closing brackets
Plug 'terryma/vim-expand-region'                        " change visual selection by using '+' / '-'
Plug 'mbbill/undotree'                                  " undo history tree
Plug 'nathanaelkane/vim-indent-guides'                  " indent columns
Plug 'w0rp/ale'                                         " lint
Plug 'Shougo/neosnippet', { 'on': [] }                  " snippets
Plug 'kien/rainbow_parentheses.vim'
Plug 'junegunn/goyo.vim'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'tpope/vim-unimpaired'                             " it can create new lines with ]
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" navigation
Plug 'scrooloose/nerdtree'                              " file tree
Plug 'kopischke/vim-fetch'                              " open file with line and column number
Plug 'yegappan/mru'                                     " most recently used files
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy search
Plug 'junegunn/fzf.vim'
Plug 'matze/vim-move'                                   " move lines around
Plug 'qpkorr/vim-bufkill'                               " close buffers without breaking splits
Plug 'junegunn/vim-slash'
Plug 'mhinz/vim-startify'                               " creates a start screen for vim

" files
Plug 'tpope/vim-eunuch'                                 " helpers for UNIX shell commands (mkdir, rename, etc.)

" git
Plug 'tpope/vim-fugitive'                               " git commands
Plug 'airblade/vim-gitgutter'                           " git gutter

" ruby / rails
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }             " ruby
Plug 'tpope/vim-endwise', { 'for': 'ruby', 'on': [] }   " auto end
Plug 'tpope/vim-rails', { 'for': 'ruby', 'on': [] }   " auto end
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }          " run rspec
" Plug 'tpope/vim-bundler', { 'for': 'ruby' }             " bundle commands and smart ctags
Plug 'kremso/vim-spectator', { 'for': 'ruby' }

" elixir
Plug 'mhinz/vim-mix-format', { 'for': ['elixir', 'eelixir'] }
Plug 'elixir-lang/vim-elixir', { 'for': ['elixir', 'eelixir'] }

" rust
Plug 'rust-lang/rust.vim'

" latex
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }
let g:livepreview_previewer = 'zathura'
let g:livepreview_cursorhold_recompile = 0

" syntaxes and languages
Plug 'shime/vim-livedown', { 'for': 'markdown' }        " real time markdown editing

" theme
Plug 'vim-airline/vim-airline'                          " status line
Plug 'vim-airline/vim-airline-themes'
" Plug 'mhartington/oceanic-next'
Plug 'sonph/onehalf', {'rtp': 'vim/'}
" repl
Plug 'metakirby5/codi.vim'

call plug#end()

" call MRU plugin with Alt + r
nnoremap Â® :MRU<CR>

" open nerdtree
map <leader><leader> :NERDTreeToggle<CR>
" open current file's path
map <leader>c :NERDTreeFind<CR>
" cd by updating NERDTree current directory and iTerm title
command! -bar -nargs=1 -complete=file CD execute ":cd " . fnamemodify(<q-args>, ':p:h') .
\ " | NERDTree " . fnamemodify(<q-args>, ':p:h') . " | NERDTreeToggle" .
\ " | :silent !title_pwd" | execute ":redraw!"

" jump to defenition with fireplace
nnoremap <C-[><C-[> [<C-d>

" vim-rspec
map <leader>t :call RunCurrentSpecFile()<CR>
map <leader>s :call RunNearestSpec()<CR>
map <leader>l :call RunLastSpec()<CR>
" map <leader>a :call RunAllSpecs()<CR>

" git gutter
nmap <leader>j <Plug>GitGutterNextHunk
nmap <leader>k <Plug>GitGutterPrevHunk
nmap <leader>u <Plug>GitGutterUndoHunk
nmap <leader>a <Plug>GitGutterStageHunk
nmap <leader>d <Plug>GitGutterPreviewHunk

" undo history
nmap <leader>h :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1

" ident lines

" alternate files
function! AltCommand(path, vim_command)
let l:alternate = system("gfind . -name '*.rb' -type f -print0 | alt " . a:path)
if empty(l:alternate)
  echo "No alternate file for " . a:path . " exists!"
else
  exec a:vim_command . " " . l:alternate
endif
endfunction
nnoremap <leader>o :call AltCommand(expand('%'), ':e')<CR>

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd ctermbg=234
hi IndentGuidesEven ctermbg=235

" autocomplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_smart_case = 0
let g:deoplete#delimiters = ['/', '.', '::', ':', '#']
let g:deoplete#max_list = 5
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_refresh_delay = 0
let g:neocomplete#min_pattern_length = 2

" <TAB>: completion
"inoremap <expr><TAB>  pumvisible() ? #"\<C-n>" : #"\<TAB>"

" multiple cursors
" let g:multi_cursor_start_key='<C-n>'
" let g:multi_cursor_start_word_key='g<C-n>'

" MatchTagAlways
let g:mta_use_matchparen_group = 0
let g:mta_set_default_matchtag_color = 0
highlight MatchTag ctermbg=240 guifg=#585858
let g:mta_filetypes = {'html' : 1, 'javascript.jsx': 1}

" don't run linters on opening a file
let g:ale_lint_on_enter = 0

" elixir
let g:mix_format_on_save = 1

" THEME CONFIGS
syntax enable

" livedown
nmap gm :LivedownToggle<CR>
let g:livedown_autorun = 0
let g:livedown_open = 1

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
