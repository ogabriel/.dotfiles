let mapleader = "\<Space>"

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')

" text editing
Plug 'godlygeek/tabular'                              " adjust elements by a certain symbol
Plug 'tpope/vim-commentary'                             " comments # use gc to comment lines and selected text
Plug 'tpope/vim-surround'                               " configure surrunds around statements
Plug 'terryma/vim-multiple-cursors'                     " multiple cursors like in ST
Plug 'junegunn/goyo.vim'                                " puts the current file in the center of screen
Plug 'tpope/vim-unimpaired'                             " it can create new lines with ]
Plug 'matze/vim-move'                                             " move lines around

" while inserting code
" Plug 'Raimondi/delimitMate'               " Insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'               " Insert or delete brackets, parens, quotes in pair
Plug 'tpope/vim-sleuth'                                 " automatically adjusts 'shiftwidth' and 'expandtab' heuristically based on the current file
Plug 'dense-analysis/ale'                               " linter, spots errors in all kinds of lines of the code
Plug 'SirVer/ultisnips' " Fast snippets
Plug 'honza/vim-snippets' " Snippets examples

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" IDE features
Plug 'scrooloose/nerdtree'                                        " file tree
Plug 'kopischke/vim-fetch'                                        " open file with line and column number
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy search
Plug 'junegunn/fzf.vim'
Plug 'qpkorr/vim-bufkill'                                         " close buffers without breaking splits
Plug 'mhinz/vim-startify'                                         " creates a start screen for vim
Plug 'junegunn/vim-slash'                               " clears search highlight when cursor is moved

" multiple languages helpers
Plug 'janko/vim-test'     " Run tests in many differente languages
Plug 'tpope/vim-dispatch' " Dipach long running applications to other windows
Plug 'tpope/vim-endwise'  " insert end after a start of a block

" Vim commands for linux native
Plug 'tpope/vim-eunuch'                                 " helpers for UNIX shell commands (mkdir, rename, etc.)

" git
Plug 'tpope/vim-fugitive'                               " git commands
Plug 'airblade/vim-gitgutter'                           " git gutter

" ruby / rails
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }             " ruby
Plug 'tpope/vim-rails', { 'for': 'ruby', 'on': [] }   " auto end
Plug 'tpope/vim-bundler', { 'for': 'ruby' }             " bundle commands and smart ctags
Plug 'kremso/vim-spectator', { 'for': 'ruby' }

" elixir
Plug 'elixir-lang/vim-elixir', { 'for': ['elixir', 'eelixir'] } " add elixir lang
Plug 'mhinz/vim-mix-format', { 'for': ['elixir', 'eelixir'] }   " mix format
Plug 'mattreduce/vim-mix', { 'for': ['elixir', 'eelixir'] }     " add calls to mix

" rust
Plug 'rust-lang/rust.vim', { 'for': ['rs', 'rlib'] }

" LaTeX
Plug 'lervag/vimtex', { 'for': ['tex', 'bib'] }
let g:vimtex_view_method = 'zathura'
let g:vimtex_quickfix_mode = 0
" \ll starts compiler \lv show file

" MarkDown
Plug 'gabrielelana/vim-markdown', { 'for': 'markdown' }        " real time markdown editing
let g:markdown_include_jekyll_support = 1

" JS
Plug 'pangloss/vim-javascript', { 'for': 'js' }        " real time markdown editing

" Theme
Plug 'vim-airline/vim-airline'                          " status bar
Plug 'vim-airline/vim-airline-themes'                   " status themes
Plug 'nathanaelkane/vim-indent-guides'                  " color indented columns
Plug 'sonph/onehalf', {'rtp': 'vim/'}                   " my current theme

call plug#end()

" call MRU plugin with Alt + r
nnoremap Â® :MRU<CR>

" open nerdtree
map <leader><leader> :NERDTreeToggle<CR>
" open current file's path
map <leader>c :NERDTreeFind<CR>
" cd by updating NERDTree current directory and iTerm title
command! -bar -nargs=1 -complete=file CD execute ":cd " . fnamemodify(<q-args>, ':p:h') .
\ " | NERDTree " . fnamemodify(<q-args>, ':p:h') . " | NERDTreeToggle" .
\ " | :silent !title_pwd" | execute ":redraw!"

" jump to defenition with fireplace
nnoremap <C-[><C-[> [<C-d>

" git gutter
nmap <leader>j <Plug>GitGutterNextHunk
nmap <leader>k <Plug>GitGutterPrevHunk
nmap <leader>u <Plug>GitGutterUndoHunk
nmap <leader>a <Plug>GitGutterStageHunk
nmap <leader>d <Plug>GitGutterPreviewHunk

" undo history
nmap <leader>h :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1

" ident lines

" alternate files
function! AltCommand(path, vim_command)
let l:alternate = system("gfind . -name '*.rb' -type f -print0 | alt " . a:path)
if empty(l:alternate)
  echo "No alternate file for " . a:path . " exists!"
else
  exec a:vim_command . " " . l:alternate
endif
endfunction
nnoremap <leader>o :call AltCommand(expand('%'), ':e')<CR>

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd ctermbg=234
hi IndentGuidesEven ctermbg=235

" autocomplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_smart_case = 0
let g:deoplete#delimiters = ['/', '.', '::', ':', '#']
let g:deoplete#max_list = 5
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_refresh_delay = 0
let g:neocomplete#min_pattern_length = 2

" multiple cursors
" let g:multi_cursor_start_key='<C-n>'
" let g:multi_cursor_start_word_key='g<C-n>'

" don't run linters on opening a file
let g:ale_lint_on_enter = 0

" elixir
let g:mix_format_on_save = 1

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" vim-test
let g:test#preserve_screen = 1

if has('nvim')
  tmap <C-o> <C-\><C-n>
endif

let test#strategy = {
  \ 'nearest': 'neovim',
  \ 'file':    'dispatch',
  \ 'suite':   'dispatch',
\}

let test#ruby#rspec#options = {
  \ 'suite':   '--fail-fast',
\}

nmap <silent> <leader>n :TestNearest<CR>
nmap <silent> <leader>f :TestFile<CR>
nmap <silent> <leader>s :TestSuite<CR>
nmap <silent> <leader>s :TestLast<CR>
nmap <silent> <leader>v :TestVisit<CR>

" Theme
" True Colors
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Colorscheme
colorscheme onehalfdark
let g:indent_guides_enable_on_vim_startup = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#21252b ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#2c313a ctermbg=4

" Airline
let g:airline_theme='onehalfdark'
let g:airline#extensions#tabline#enabled  = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_section_y = '%{strftime("%H:%M")}'
let g:airline_section_warning             = ''
let g:airline_detect_crypt                = 0
