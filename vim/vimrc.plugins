if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" text editing
Plug 'godlygeek/tabular'                                          " adjust elements by a certain symbol
Plug 'tpope/vim-commentary'                                       " comments # use gc to comment lines and selected text
Plug 'tpope/vim-surround'                                         " configure surrunds around statements
Plug 'terryma/vim-multiple-cursors'                               " multiple cursors like in ST
Plug 'tpope/vim-unimpaired'                                       " it can create new lines with ]
Plug 'matze/vim-move'                                             " move lines around

" while inserting code
" Plug 'Raimondi/delimitMate'                                     " Insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'                                       " Insert or delete brackets, parens, quotes in pair
Plug 'tpope/vim-sleuth'                                           " automatically adjusts 'shiftwidth' and 'expandtab' heuristically based on the current file
Plug 'dense-analysis/ale'                                         " linter, spots errors in all kinds of lines of the code
" Plug 'SirVer/ultisnips'                                           " Fast snippets
Plug 'honza/vim-snippets'                                         " Snippets examples

" complete
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif

" IDE features
Plug 'scrooloose/nerdtree'                                        " file tree
Plug 'kopischke/vim-fetch'                                        " open file with line and column number
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy search
Plug 'junegunn/fzf.vim'
Plug 'qpkorr/vim-bufkill'                                         " close buffers without breaking splits
Plug 'mhinz/vim-startify'                                         " creates a start screen for vim
Plug 'junegunn/vim-slash'                                         " clears search highlight when cursor is moved

" multiple languages helpers
Plug 'janko/vim-test'                                             " Run tests in many differente languages
Plug 'tpope/vim-dispatch'                                         " Dipach long running applications to other windows
Plug 'tpope/vim-endwise'                                          " insert end after a start of a block

" Vim commands for linux native
Plug 'tpope/vim-eunuch'                                           " helpers for UNIX shell commands (mkdir, rename, etc.)

" git
Plug 'tpope/vim-fugitive'                      " git commands
Plug 'airblade/vim-gitgutter'                                     " git gutter

" ruby / rails
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }                       " ruby
Plug 'tpope/vim-rails', { 'for': 'ruby', 'on': [] }               " auto end
Plug 'tpope/vim-bundler', { 'for': 'ruby' }                       " bundle commands and smart ctags
Plug 'kremso/vim-spectator', { 'for': 'ruby' }

" elixir
Plug 'elixir-lang/vim-elixir', { 'for': ['elixir', 'eelixir'] }   " add elixir lang
Plug 'mhinz/vim-mix-format', { 'for': ['elixir', 'eelixir'] }     " mix format
Plug 'mattreduce/vim-mix', { 'for': ['elixir', 'eelixir'] }       " add calls to mix

" rust
Plug 'rust-lang/rust.vim', { 'for': ['rs', 'rlib'] }

" LaTeX
Plug 'lervag/vimtex', { 'for': ['tex', 'bib'] }
let g:vimtex_view_method = 'zathura'
let g:vimtex_quickfix_mode = 0
" \ll starts compiler \lv show file

" MarkDown
Plug 'gabrielelana/vim-markdown', { 'for': 'markdown' }           " real time markdown editing
let g:markdown_include_jekyll_support = 1

" JS
Plug 'pangloss/vim-javascript', { 'for': 'js' }                   " real time markdown editing

" openSCAD
Plug 'sirtaj/vim-openscad', { 'for': 'scad' }                   " real time markdown editing

" Theme
Plug 'vim-airline/vim-airline'                                    " status bar
Plug 'vim-airline/vim-airline-themes'                             " status themes
Plug 'nathanaelkane/vim-indent-guides'                            " color indented columns
Plug 'sonph/onehalf', {'rtp': 'vim/'}                             " my current theme

call plug#end()

" NERDtree
let g:NERDTreeWinSize                     = 30
let NERDTreeShowHidden                    = 1

map <leader><leader> :NERDTreeToggle<CR>
map <leader>c :NERDTreeFind<CR>
" cd by updating NERDTree current directory
command! -bar -nargs=1 -complete=file CD execute ":cd " . fnamemodify(<q-args>, ':p:h') .
\ " | NERDTree " . fnamemodify(<q-args>, ':p:h') . " | NERDTreeToggle" .
\ " | :silent !title_pwd" | execute ":redraw!"

" git gutter
nmap <leader>j <Plug>GitGutterNextHunk
nmap <leader>k <Plug>GitGutterPrevHunk
nmap <leader>u <Plug>GitGutterUndoHunk
nmap <leader>a <Plug>GitGutterStageHunk
nmap <leader>d <Plug>GitGutterPreviewHunk

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#21252b ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#2c313a ctermbg=4

" autocomplete
"let g:deoplete#enable_at_startup = 1
"let g:deoplete#enable_ignore_case = 0
""let g:deoplete#enable_smart_case = 0
"let g:deoplete#delimiters = ['/', '.', '::', ':', '#']
""let g:deoplete#max_list = 5
""let g:deoplete#auto_complete_delay = 0
""let g:deoplete#auto_refresh_delay = 0
"let g:neocomplete#min_pattern_length = 2
"call deoplete#custom#option('num_processes', 1)

let g:coc_global_extensions = [
      \'coc-json',
      \'coc-tsserver',
      \'coc-word',
      \'coc-elixir',
      \'coc-rust-analyzer',
      \'coc-css',
      \'coc-snippets',
      \'coc-ultisnips',
      \'coc-yaml',
      \'coc-highlight'
      \]
      " \'coc-solargraph',

" use <tab> to trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab> coc#pum#visible() ? coc#pum#confirm() : "\<Tab>"

inoremap <expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-j>"
inoremap <expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-k>"

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" multiple cursors
" let g:multi_cursor_start_key='<C-n>'
" let g:multi_cursor_start_word_key='g<C-n>'

" ale
let g:ale_lint_on_enter = 1

" elixir
let g:mix_format_on_save = 1
let g:mix_format_silent_errors = 1

" vim-move
let g:move_key_modifier                   = 'A'

" buffkill
map <C-x> :BD<cr>
map <A-x> :bd<cr>

" fzf.vim
nnoremap <silent> <C-f> :Ag<CR>
nnoremap <silent> <C-p> :Files<CR>
nmap <leader>b :Buffers<cr>

" vim-slash
" Places the current match at the center of the window.
noremap <plug>(slash-after) zz

" UltiSnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<Nop>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" let g:UltiSnipsEditSplit="vertical"

" vim-test
let g:test#preserve_screen = 1

if has('nvim')
  tmap <C-o> <C-\><C-n>
endif

let test#strategy = {
  \ 'nearest': 'neovim',
  \ 'file':    'dispatch',
  \ 'suite':   'dispatch',
\}

let test#ruby#rspec#options = {
  \ 'suite':   '--fail-fast',
\}

nmap <silent> <leader>n :TestNearest<CR>
nmap <silent> <leader>f :TestFile<CR>
nmap <silent> <leader>s :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>v :TestVisit<CR>

" Theme
" True Colors
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Colorscheme
colorscheme onehalfdark

" Airline
let g:airline_theme='onehalfdark'
let g:airline#extensions#tabline#enabled  = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_section_y = '%{strftime("%H:%M")}'
let g:airline_section_warning             = ''
let g:airline_detect_crypt                = 0

" Fugitive
:command Gcommit Git commit
:command Gc Git commit
:command Gpush Git push
:command Gu Git push
:command Gpull Git pull
:command Gp Git pull
:command Gb Git blame
:command Gblame Git blame
:command Gdelete GRemove
autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])
au FileType gitcommit 1 | startinsert
